/*
Cuckoo Sandbox - Automated Malware Analysis.
Copyright (C) 2010-2014 Cuckoo Foundation.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include <stdint.h>
#include "hooks.h"
#include "dropped.h"
#include "hooking.h"
#include "monitor.h"
#include "ntapi.h"
#include "log.h"
#include "misc.h"
#include "pipe.h"
#include "sleep.h"

{%- for hook in sigs if hook.is_hook: %}


{{hook.signature.return_value}} ({{hook.signature.calling_convention}} *Old_{{hook.apiname}})(
{%- for param in hook.parameters: %}
    {{param.argtype}}
    {%- if not param.argtype.endswith('*') %} {% endif -%}
    {{param.argname}}
    {%- if not loop.last %},{% endif -%}
{%- endfor %}
);

{{hook.signature.return_value}} {{hook.signature.calling_convention}} New_{{hook.apiname}}(
{%- for param in hook.parameters: %}
    {{param.argtype}}
    {%- if not param.argtype.endswith('*') %} {% endif -%}
    {{param.argname}}
    {%- if not loop.last %},{% endif -%}
{%- endfor %}
) {
    {%- for param in hook.ensure.keys(): %}
    {{hook.ensure[param]}} _{{param}};
    if({{param}} == NULL) {
        {{param}} = &_{{param}};
        memset(&_{{param}}, 0, sizeof({{hook.ensure[param]}}));
    }
    {%- endfor %}

    {%- if hook.pre: %}
    {%- for line in hook.pre: %}
    {{line}}
    {%- endfor %}
    {% endif %}

    {%- if hook.prelog: %}
    log_api_pre("{{ hook.prelog|join(attribute='argtype') }}"
    {%- for log in hook.prelog: -%}
        ,
        {{log.argvalue}}
    {%- endfor %}
    );
    {%- endif %}

    {%- if hook.signature.return_value != 'void' %}
    {{hook.signature.return_value}} ret;
    {% endif %}

    {% if hook.signature.terminates: %}
    {% if hook.signature.special: %}
    if(hook_info()->hook_count == 1) {
    {% endif %}
    log_api({{ hook.index }},
        {{ hook.signature.is_success }},
        {%- if hook.signature.return_value != 'void' %}
        (uintptr_t) ret,
        {%- else %}
        0,
        {%- endif %}
        "
    {%- for param in hook.parameters: -%}
        {%- if param.log == True: -%}
            {{types[param.argtype]}}
        {%- endif -%}
    {%- endfor -%}
    {%- for log in hook.logging: -%}
        {{log.argtype}}
    {%- endfor -%}
    "
    {%- for param in hook.parameters: -%}
        {% if param.log == True: -%}
        ,
        {{param.argname}}
        {%- endif %}
    {%- endfor %}
    {%- for log in hook.logging: -%}
        ,
        {{log.argvalue}}
    {%- endfor %}
    );
    {% if hook.signature.special: %}
    }
    {% endif %}
    {% endif %}

    {%- if hook.signature.return_value != 'void' %}
    ret = Old_{{hook.apiname}}(
    {%- else %}
    Old_{{hook.apiname}}(
    {%- endif %}
    {%- for param in hook.parameters: %}
        {{param.argname}}
        {%- if not loop.last %},{% endif -%}
    {%- endfor %}
    );

    {%- if hook.middle: %}
    {%- for line in hook.middle: %}
    {{line}}
    {%- endfor %}
    {% endif %}

    {% if not hook.signature.terminates %}
    {% if hook.signature.special: %}
    if(hook_info()->hook_count == 1) {
    {% endif %}
    log_api({{ hook.index }},
        {{ hook.signature.is_success }},
        {%- if hook.signature.return_value != 'void' %}
        (uintptr_t) ret,
        {%- else %}
        0,
        {%- endif %}
        "
    {%- for param in hook.parameters: -%}
        {%- if param.log == True: -%}
            {{types[param.argtype]}}
        {%- endif -%}
    {%- endfor -%}
    {%- for log in hook.logging: -%}
        {{log.argtype}}
    {%- endfor -%}
    "
    {%- for param in hook.parameters: -%}
        {% if param.log == True: -%}
        ,
        {{param.argname}}
        {%- endif %}
    {%- endfor %}
    {%- for log in hook.logging: -%}
        ,
        {{log.argvalue}}
    {%- endfor %}
    );
    {% if hook.signature.special: %}
    }
    {% endif %}
    {% endif %}

    {%- if hook.post: %}
    {% for line in hook.post: %}
    {{line}}
    {%- endfor %}
    {% endif %}
    {% if hook.signature.return_value != 'void' %}
    return ret;
    {%- else %}
    return;
    {%- endif %}
}

{%- endfor %}

const char *g_explain_apinames[] = {
{%- for hook in sigs: %}
    "{{ hook.apiname }}",
{%- endfor %}
    NULL,
};

const char *g_explain_categories[] = {
{%- for hook in sigs: %}
    /* {{ '%-32s'|format(hook.apiname) }} */ "{{ hook.signature.category }}",
{%- endfor %}
};

const char *g_explain_paramtypes[] = {
{%- for hook in sigs: %}
    /* {{ '%-32s'|format(hook.apiname) }} */ "
    {%- for param in hook.prelog: -%}
        {{ param.argtype }}
    {%- endfor -%}
    {%- for param in hook.parameters: -%}
        {% if param.log %}{{ types[param.argtype] }}{% endif %}
    {%- endfor -%}
    {%- for param in hook.logging: -%}
        {{ param.argtype }}
    {%- endfor -%}
    ",
{%- endfor %}
};

const char *g_explain_paramnames[][16] = {
{%- for hook in sigs: %}
    /* {{ hook.apiname }} */
    {
    {%- for param in hook.prelog: -%}
        {% if True %}"{{ param.argname }}", {% endif %}
    {%- endfor -%}
    {%- for param in hook.parameters: -%}
        {% if param.log %}"{{ param.alias }}", {% endif %}
    {%- endfor -%}
    {%- for param in hook.logging: -%}
        {% if True %}"{{ param.argname }}", {% endif %}
    {%- endfor -%}
    },
{%- endfor %}
};

hook_t g_hooks[] = {
{%- for hook in sigs: %}
    {%- if hook.is_hook: %}
    {"{{hook.signature.library}}", "{{hook.apiname}}", (FARPROC) New_{{hook.apiname}}, (FARPROC *) &Old_{{hook.apiname}}, {{hook.signature.special.__int__()}}, NULL, 0, NULL},
    {%- endif %}
{%- endfor %}
    {NULL, NULL, NULL, NULL, 0, NULL, 0, NULL},
};
